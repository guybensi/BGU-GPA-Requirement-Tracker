{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNcI2hfl3ij4/3+NZS9tQ94",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/guybensi/BGU-GPA-Requirement-Tracker/blob/main/apl-2025-spring-mohs\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M4nOnZL-adJY",
        "outputId": "09c18906-4801-4940-96fb-339a2fcbc535"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/386.6 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━━━━━━━━━\u001b[0m \u001b[32m276.5/386.6 kB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m386.6/386.6 kB\u001b[0m \u001b[31m7.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/242.5 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m242.5/242.5 kB\u001b[0m \u001b[31m18.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ],
      "source": [
        "!pip install lightgbm xgboost optuna scikit-learn pandas numpy matplotlib seaborn --quiet\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "train = pd.read_csv(\"train.csv\")\n",
        "test = pd.read_csv(\"test.csv\")\n",
        "\n",
        "train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "dkzAMIA4a0kQ",
        "outputId": "7e1760fd-8eaa-46aa-ee7c-40b0d604b3dc"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   id  Hardness  allelectrons_Total  density_Total  allelectrons_Average  \\\n",
              "0   0       2.5               134.0      13.477328             22.800000   \n",
              "1   1       2.8                46.0       2.701748              5.750000   \n",
              "2   2       3.8                82.0      11.351332             42.000000   \n",
              "3   3       4.0                20.0       2.707666             10.000000   \n",
              "4   4       3.5                40.0       2.703247              5.714286   \n",
              "\n",
              "   val_e_Average  atomicweight_Average  ionenergy_Average  el_neg_chi_Average  \\\n",
              "0       5.000000             49.496000          11.177140            2.684000   \n",
              "1       3.764706             11.434719          11.660488            2.779524   \n",
              "2       5.000000            102.827560           9.695000            2.280000   \n",
              "3       4.000000             20.994127          11.798860            2.805000   \n",
              "4       3.428571             11.143164          12.551871            2.735714   \n",
              "\n",
              "   R_vdw_element_Average  R_cov_element_Average  zaratio_Average  \\\n",
              "0               1.720000               0.960000         0.479965   \n",
              "1               1.520000               0.722500         0.614430   \n",
              "2               1.970000               1.290000         0.401635   \n",
              "3               1.656000               0.848000         0.499010   \n",
              "4               1.527143               0.718571         0.624404   \n",
              "\n",
              "   density_Average  \n",
              "0          2.11540  \n",
              "1          0.02220  \n",
              "2          5.27570  \n",
              "3          0.67999  \n",
              "4          0.55823  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4ace5684-a283-4ec7-884b-fa4d8268c7ad\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>Hardness</th>\n",
              "      <th>allelectrons_Total</th>\n",
              "      <th>density_Total</th>\n",
              "      <th>allelectrons_Average</th>\n",
              "      <th>val_e_Average</th>\n",
              "      <th>atomicweight_Average</th>\n",
              "      <th>ionenergy_Average</th>\n",
              "      <th>el_neg_chi_Average</th>\n",
              "      <th>R_vdw_element_Average</th>\n",
              "      <th>R_cov_element_Average</th>\n",
              "      <th>zaratio_Average</th>\n",
              "      <th>density_Average</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>2.5</td>\n",
              "      <td>134.0</td>\n",
              "      <td>13.477328</td>\n",
              "      <td>22.800000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>49.496000</td>\n",
              "      <td>11.177140</td>\n",
              "      <td>2.684000</td>\n",
              "      <td>1.720000</td>\n",
              "      <td>0.960000</td>\n",
              "      <td>0.479965</td>\n",
              "      <td>2.11540</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2.8</td>\n",
              "      <td>46.0</td>\n",
              "      <td>2.701748</td>\n",
              "      <td>5.750000</td>\n",
              "      <td>3.764706</td>\n",
              "      <td>11.434719</td>\n",
              "      <td>11.660488</td>\n",
              "      <td>2.779524</td>\n",
              "      <td>1.520000</td>\n",
              "      <td>0.722500</td>\n",
              "      <td>0.614430</td>\n",
              "      <td>0.02220</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>3.8</td>\n",
              "      <td>82.0</td>\n",
              "      <td>11.351332</td>\n",
              "      <td>42.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>102.827560</td>\n",
              "      <td>9.695000</td>\n",
              "      <td>2.280000</td>\n",
              "      <td>1.970000</td>\n",
              "      <td>1.290000</td>\n",
              "      <td>0.401635</td>\n",
              "      <td>5.27570</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>4.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>2.707666</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>20.994127</td>\n",
              "      <td>11.798860</td>\n",
              "      <td>2.805000</td>\n",
              "      <td>1.656000</td>\n",
              "      <td>0.848000</td>\n",
              "      <td>0.499010</td>\n",
              "      <td>0.67999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>3.5</td>\n",
              "      <td>40.0</td>\n",
              "      <td>2.703247</td>\n",
              "      <td>5.714286</td>\n",
              "      <td>3.428571</td>\n",
              "      <td>11.143164</td>\n",
              "      <td>12.551871</td>\n",
              "      <td>2.735714</td>\n",
              "      <td>1.527143</td>\n",
              "      <td>0.718571</td>\n",
              "      <td>0.624404</td>\n",
              "      <td>0.55823</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4ace5684-a283-4ec7-884b-fa4d8268c7ad')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4ace5684-a283-4ec7-884b-fa4d8268c7ad button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4ace5684-a283-4ec7-884b-fa4d8268c7ad');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-0b4bc330-5cf3-4d30-bfb9-cca83d85b7fb\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0b4bc330-5cf3-4d30-bfb9-cca83d85b7fb')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-0b4bc330-5cf3-4d30-bfb9-cca83d85b7fb button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "train",
              "summary": "{\n  \"name\": \"train\",\n  \"rows\": 15000,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4330,\n        \"min\": 0,\n        \"max\": 14999,\n        \"num_unique_values\": 15000,\n        \"samples\": [\n          11499,\n          6475,\n          13167\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hardness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7248693685865977,\n        \"min\": 1.0,\n        \"max\": 25.333333333333,\n        \"num_unique_values\": 44,\n        \"samples\": [\n          1.0,\n          3.3,\n          7.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"allelectrons_Total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 279.84796683034097,\n        \"min\": 0.0,\n        \"max\": 15300.0,\n        \"num_unique_values\": 347,\n        \"samples\": [\n          19.0,\n          446.0,\n          53.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"density_Total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.705945607159533,\n        \"min\": 0.0,\n        \"max\": 643.0938035,\n        \"num_unique_values\": 1276,\n        \"samples\": [\n          6.25674375,\n          11.060299,\n          14.055328\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"allelectrons_Average\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10.834258942042815,\n        \"min\": 0.0,\n        \"max\": 128.0,\n        \"num_unique_values\": 667,\n        \"samples\": [\n          6.173913043478262,\n          8.245877061469265,\n          66.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"val_e_Average\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8346946037350151,\n        \"min\": 0.0,\n        \"max\": 6.0,\n        \"num_unique_values\": 212,\n        \"samples\": [\n          1.5,\n          2.333333333333333,\n          4.23809523809526\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"atomicweight_Average\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 68088.983961967,\n        \"min\": 0.0,\n        \"max\": 4814975.0,\n        \"num_unique_values\": 801,\n        \"samples\": [\n          20.45794425,\n          80.07104166666666,\n          20.94688789090909\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ionenergy_Average\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8290977409120348,\n        \"min\": 0.0,\n        \"max\": 16.24581,\n        \"num_unique_values\": 839,\n        \"samples\": [\n          10.198130769230769,\n          12.1899088846154,\n          8.12415\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"el_neg_chi_Average\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.43759649826736496,\n        \"min\": 0.0,\n        \"max\": 3.443,\n        \"num_unique_values\": 748,\n        \"samples\": [\n          3.184433962264152,\n          1.79,\n          2.44\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"R_vdw_element_Average\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2718160463204814,\n        \"min\": 0.0,\n        \"max\": 2.33333333333333,\n        \"num_unique_values\": 776,\n        \"samples\": [\n          1.5508620689655173,\n          1.500704647676162,\n          1.8152\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"R_cov_element_Average\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2079896856423132,\n        \"min\": 0.0,\n        \"max\": 1.744,\n        \"num_unique_values\": 669,\n        \"samples\": [\n          0.8277777777777778,\n          0.904,\n          0.8512195121951219\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zaratio_Average\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.08174735513229953,\n        \"min\": 0.0,\n        \"max\": 0.82599,\n        \"num_unique_values\": 790,\n        \"samples\": [\n          0.49159125,\n          0.48502,\n          0.490654\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"density_Average\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8749691658061656,\n        \"min\": 0.0,\n        \"max\": 10.97,\n        \"num_unique_values\": 599,\n        \"samples\": [\n          0.8527,\n          0.98478,\n          4.8568\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    }
  ]
}